## doctor Home Page

import logging
logger = logging.getLogger(__name__)

import streamlit as st
from modules.nav import SideBarLinks #### need to add this to the project


import streamlit as st
import pandas as pd
import requests
from datetime import datetime

## page config
st.set_page_config(
    page_title="Doctor Portal",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded",
)

API_BASE_URL = "http://localhost:4001" ## API 

## custom CSS
st.markdown(
    """
    <style>
      #MainMenu {visibility: hidden;}
      footer {visibility: hidden;}
      [data-testid="stSidebar"] {width: 260px;}
      [data-baseweb="radio"] > div {row-gap: .35rem;}
      
      /* Patient card styling */
      .patient-card {
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        margin: 12px 0;
        display: flex;
        align-items: center;
        background: white;
      }
      
      .patient-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: 2px solid #333;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 20px;
        font-size: 24px;
        background: #f8f9fa;
      }
      
      .patient-info {
        flex-grow: 1;
        line-height: 1.6;
      }
      
      .patient-field {
        margin: 4px 0;
        font-weight: 500;
      }
      
      .field-line {
        display: inline-block;
        width: 150px;
        height: 1px;
        background: #333;
        margin-left: 8px;
      }
      
      .metric-card {
        background: white;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        text-align: center;
      }
      
      .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #0068c9;
      }
      
      .metric-label {
        color: #666;
        margin-top: 8px;
      }
    </style>
    """,
    unsafe_allow_html=True,
)

if "page" not in st.session_state:
    st.session_state.page = "üè† Home" ## defaults to home page

def test_api_connection():
    """Test API connection"""
    try:
        response = requests.get(f"{API_BASE_URL}/simple/playlist", timeout=5) ## test endpoint
        return response.status_code == 200
    except:
        return False

def get_doctors():
    """Get all doctors from API"""
    try:
        response = requests.get(f"{API_BASE_URL}/doctors")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def get_patients():
    """Get all patients from API"""
    try:
        response = requests.get(f"{API_BASE_URL}/patient/patients")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def get_patient_details(patient_id):
    """Get detailed patient information"""
    try:
        ## get patient basic info
        patient_response = requests.get(f"{API_BASE_URL}/patient/patients/{patient_id}")
        if patient_response.status_code != 200:
            return None
            
        patient = patient_response.json()
        
        ## get patient vitals
        vitals_response = requests.get(f"{API_BASE_URL}/patient/patients/{patient_id}/vitals")
        vitals = vitals_response.json() if vitals_response.status_code == 200 else []
        
        ## get patient conditions
        conditions_response = requests.get(f"{API_BASE_URL}/patient/patients/{patient_id}/condition")
        conditions = conditions_response.json() if conditions_response.status_code == 200 else []
        
        ## get patient medications
        meds_response = requests.get(f"{API_BASE_URL}/patient/patients/{patient_id}/medications")
        medications = meds_response.json() if meds_response.status_code == 200 else []
        
        ## get patient visits
        visits_response = requests.get(f"{API_BASE_URL}/visit/visits")
        visits = visits_response.json() if visits_response.status_code == 200 else []
        patient_visits = [v for v in visits if v.get('PatientID') == patient_id]
        
        return {
            'patient': patient,
            'vitals': vitals,
            'conditions': conditions,
            'medications': medications,
            'visits': patient_visits
        }
    except:
        return None

def get_visits():
    """Get all visits from API"""
    try:
        response = requests.get(f"{API_BASE_URL}/visit/visits")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def get_vitals():
    """Get all vital charts from API"""
    try:
        response = requests.get(f"{API_BASE_URL}/vital/vitalcharts")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def get_conditions():
    """Get all conditions from API"""
    try:
        response = requests.get(f"{API_BASE_URL}/condition/conditions")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def get_alerts(doctor_id):
    """Get alerts for specific doctor"""
    try:
        response = requests.get(f"{API_BASE_URL}/alerts?user_type=doctor&user_id={doctor_id}")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def get_messages(doctor_id):
    """Get messages for specific doctor"""
    try:
        response = requests.get(f"{API_BASE_URL}/messages?user_type=doctor&user_id={doctor_id}")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

## sidebar navigation
with st.sidebar:
    ## get doctor information from API
    doctors = get_doctors()
    doctor_name = "Dr. Ellison"  ## default fallback for user persona only
    
    if doctors:
        ##handling for user persona only
        current_doctor = doctors[0]
        doctor_name = f"Dr. {current_doctor.get('LastName', 'Ellison')}"
        st.session_state.current_doctor_id = current_doctor.get('DoctorID', 1)
    else:
        st.session_state.current_doctor_id = 1
    
    st.markdown(f"### Welcome, {doctor_name}")
    nav_labels = ["üè† Home", "üë• Patients", "‚ö†Ô∏è Alerts", "üì• Inbox"]
    selected = st.radio(" ", nav_labels, index=nav_labels.index(st.session_state.page), label_visibility="collapsed")
    st.session_state.page = selected

    st.divider()
    
    st.button("‚öôÔ∏è Settings", help="Open settings") ## this does nothing yet!!!

## we should probably make this global??? since its on every pa
top_left, top_spacer, top_right = st.columns([6, 1, 3])
with top_left:
    global_search = st.text_input("Search", placeholder="Search patients, conditions, medications...", label_visibility="visible")
with top_right:
    hospital = st.selectbox("Hospital", ["General Hospital", "City Medical", "Regional Center"])

## page 
def render_patient_card(patient_data):
    """Render a patient card with real API data"""
    if not patient_data:
        return
    
    patient = patient_data.get('patient', {})
    vitals = patient_data.get('vitals', [])
    conditions = patient_data.get('conditions', [])
    visits = patient_data.get('visits', [])
    
    ## get latest vital signs
    latest_vitals = vitals[-1] if vitals else {}
    latest_visit = visits[-1] if visits else {}
    
    ## format dates
    dob = patient.get('DOB', 'N/A')
    if dob and dob != 'N/A':
        try:
            dob = datetime.strptime(dob, '%a, %d %b %Y %H:%M:%S %Z').strftime('%m/%d/%Y')
        except:
            pass
    
    admit_date = latest_visit.get('AppointmentDate', 'N/A')
    if admit_date and admit_date != 'N/A':
        try:
            admit_date = datetime.strptime(admit_date, '%Y-%m-%d').strftime('%m/%d/%Y')
        except:
            pass
    
    ## get patient initials for avatar
    first_name = patient.get('FirstName', '')
    last_name = patient.get('LastName', '')
    initials = f"{first_name[0] if first_name else 'P'}{last_name[0] if last_name else 'T'}"
    
    card_html = f"""
    <div class="patient-card">
        <div class="patient-avatar">{initials}</div>
        <div class="patient-info">
            <div class="patient-field">Patient Name: <strong>{patient.get('FirstName', 'N/A')} {patient.get('LastName', 'N/A')}</strong></div>
            <div class="patient-field">DOB: <strong>{dob}</strong></div>
            <div class="patient-field">Admit Date: <strong>{admit_date}</strong></div>
            <div class="patient-field">Blood Type: <strong>{patient.get('BloodType', 'N/A')}</strong></div>
            <div class="patient-field">Weight: <strong>{patient.get('Weight', 'N/A')} lbs</strong></div>
        </div>
    </div>
    """
    
    col1, col2, col3 = st.columns([4, 1, 1])
    with col1:
        st.markdown(card_html, unsafe_allow_html=True)
    with col2:
        if st.button("üìä Chart", key=f"chart_{patient.get('PatientID')}", use_container_width=True):
            st.session_state.selected_patient = patient.get('PatientID')
            st.session_state.page = "üë• Patients"
            st.rerun()
    with col3:
        if st.button("üíä Meds", key=f"meds_{patient.get('PatientID')}", use_container_width=True):
            st.info(f"Medications for {patient.get('FirstName', 'Patient')}")

def page_home():
    ## check API connection
    if not test_api_connection():
        st.error("‚ö†Ô∏è Cannot connect to API server. Please ensure the API is running on localhost:4001")
        st.info("Start the API with: `docker compose -f sandbox.yaml up -d`")
        return
    
    ## patient search bar
    patient_search = st.text_input("Patient Search", placeholder="Search patients by name...", label_visibility="visible")
    
    st.markdown("---")
    
    ## dashboard metrics
    st.markdown("### Dashboard Overview")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        patients = get_patients()
        st.markdown(
            f"""
            <div class="metric-card">
                <div class="metric-value">{len(patients) if patients else 0}</div>
                <div class="metric-label">Total Patients</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    with col2:
        visits = get_visits()
        active_visits = len([v for v in visits if v.get('Status') == 'Active']) if visits else 0
        st.markdown(
            f"""
            <div class="metric-card">
                <div class="metric-value">{active_visits}</div>
                <div class="metric-label">Active Visits</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    with col3:
        vitals = get_vitals()
        st.markdown(
            f"""
            <div class="metric-card">
                <div class="metric-value">{len(vitals) if vitals else 0}</div>
                <div class="metric-label">Vital Records</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    with col4:
        conditions = get_conditions()
        st.markdown(
            f"""
            <div class="metric-card">
                <div class="metric-value">{len(conditions) if conditions else 0}</div>
                <div class="metric-label">Conditions</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    st.markdown("---")
    
    ## patient list with actial API data
    st.markdown("### Recent Patients")
    
    if patient_search:
        # search patients by their names
        filtered_patients = []
        if patients:
            for patient in patients:
                full_name = f"{patient.get('FirstName', '')} {patient.get('LastName', '')}".lower()
                if patient_search.lower() in full_name:
                    filtered_patients.append(patient)
        
        if filtered_patients:
            st.info(f"Found {len(filtered_patients)} patients matching '{patient_search}'")
        else:
            st.warning(f"No patients found matching '{patient_search}'")
            filtered_patients = patients[:4]  # Show default list
    else:
        filtered_patients = patients[:4] if patients else []
    
     #get patient details and render patient cards
    if filtered_patients:
        for patient in filtered_patients:
            patient_details = get_patient_details(patient.get('PatientID'))
            render_patient_card(patient_details)
    else:
        st.info("No patient data available. Please ensure the API is running and contains data.")

def page_patients():
    st.markdown("## Patient Management")
    
    ## get all patients
    patients = get_patients()
    
    if not patients:
        st.warning("No patients found.")
        return
    
    ## patient search and filtering
    col1, col2 = st.columns([3, 1])
    with col1:
        patient_filter = st.text_input("Filter patients", placeholder="Search by patient name...")
    with col2:
        sort_by = st.selectbox("Sort by", ["Name", "DOB", "Recent Visit"])
    
    # filter patients by their names
    if patient_filter:
        filtered_patients = [
            p for p in patients 
            if patient_filter.lower() in f"{p.get('FirstName', '')} {p.get('LastName', '')}".lower()
        ]
    else:
        filtered_patients = patients
    
    ## display patient data
    if filtered_patients:
        st.markdown(f"### Showing {len(filtered_patients)} patients")
        
        ## create patient dataframe
        patient_data = []
        for patient in filtered_patients:
            patient_data.append({
                'ID': patient.get('PatientID'),
                'First Name': patient.get('FirstName'),
                'Last Name': patient.get('LastName'),
                'DOB': patient.get('DOB'),
                'Blood Type': patient.get('BloodType'),
                'Weight': patient.get('Weight'),
                'Actions': f"View Details | Chart | Medications"
            })
        
        df = pd.DataFrame(patient_data)
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        st.info("No patients match your search criteria.")

def page_alerts():
    st.markdown("## Patient Alerts")
    
    ## get alerts for current doctor
    doctor_id = st.session_state.get('current_doctor_id', 1)
    alerts = get_alerts(doctor_id)
    
    if not alerts:
        st.info("No active alerts at this time.")
        return
    
    ## display alerts
    for alert in alerts:
        with st.expander(f"‚ö†Ô∏è {alert.get('Title', 'Alert')} - {alert.get('Severity', 'Medium')}"):
            st.markdown(f"**Description:** {alert.get('Description', 'No description')}")
            st.markdown(f"**Patient ID:** {alert.get('PatientID', 'N/A')}")
            st.markdown(f"**Timestamp:** {alert.get('Timestamp', 'N/A')}")
            st.markdown(f"**Acknowledged:** {'Yes' if alert.get('Acknowledged') else 'No'}")
            
            if not alert.get('Acknowledged'):
                if st.button(f"Acknowledge Alert {alert.get('AlertID')}", key=f"ack_{alert.get('AlertID')}"):
                    st.success("Alert acknowledged!")
                    st.rerun()

def page_inbox():
    st.markdown("## Messages & Communications")
    
    ## get messages for current doctor
    doctor_id = st.session_state.get('current_doctor_id', 1)
    messages = get_messages(doctor_id)
    
    if not messages:
        st.info("No messages in your inbox.")
        return
    
    ## display messages
    for message in messages:
        with st.expander(f"üìß {message.get('Subject', 'No Subject')} - {message.get('Timestamp', 'N/A')}"):
            st.markdown(f"**From:** {message.get('SenderType', 'Unknown')} {message.get('SenderID', 'N/A')}")
            st.markdown(f"**Content:** {message.get('Content', 'No content')}")
            st.markdown(f"**Read:** {'Yes' if message.get('ReadStatus') else 'No'}")
            st.markdown(f"**Priority:** {message.get('Priority', 'Normal')}")

##specific nav bar for this page when doctor is logged in
router = {
    "üè† Home": page_home,
    "üë• Patients": page_patients,
    "‚ö†Ô∏è Alerts": page_alerts,
    "üì• Inbox": page_inbox,
}

## show the selected page
router[st.session_state.page]()

